env:
  PYTHONHASHSEED: "0"

on:
  workflow_call:
    inputs:
      additional-extras:
        description: Space-separated additional extras that need to be installed for the tests.
        required: false
        type: string
      coverage-python-version:
        default: "3.12"
        required: false
        type: string
      coverage-target:
        required: false
        type: string
      macos-python-version:
        required: false
        type: string
      multithreaded:
        default: true
        required: false
        type: boolean
      skipped-python-versions:
        required: false
        type: string
      specific-pip-packages:
        required: false
        type: string
      test-output-path:
        required: false
        type: string
    secrets:
      CODECOV_TOKEN:
        description: Token for uploading reports to Codecov. See https://docs.codecov.com/docs/codecov-uploader.
        required: false

jobs:
  create-matrix:
    name: Determine job matrix
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-24.04
    steps:
      - id: set-matrix
        uses: ComPWA/actions/create-pytest-matrix@v2
        with:
          coverage-python-version: ${{ inputs.coverage-python-version }}
          coverage-target: ${{ inputs.coverage-target }}
          macos-python-version: ${{ inputs.macos-python-version }}
          skipped-python-versions: ${{ inputs.skipped-python-versions }}

  pytest:
    name: Run unit tests
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      UV_PYTHON_DOWNLOADS: never
      UV_PYTHON_PREFERENCE: only-system
      UV_SYSTEM_PYTHON: 1
    needs: create-matrix
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.create-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: astral-sh/setup-uv@v5
        with:
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
      - uses: ComPWA/actions/cache-sympy@v2
      - id: extra
        if: inputs.additional-extras
        name: Determine extras to install
        run: |
          test_extras=''
          for extra in ${{ inputs.additional-extras }}; do
            test_extras="$test_extras --group $extra"
          done
          echo "extras=$test_extras" | tee -a $GITHUB_OUTPUT
      - id: with
        if: inputs.specific-pip-packages
        name: Determine additional packages to install
        run: |
          additional_packages=''
          for package in ${{ inputs.specific-pip-packages }}; do
            additional_packages="$additional_packages --with $package"
          done
          echo "packages=$additional_packages" | tee -a $GITHUB_OUTPUT
      - id: coverage
        if: matrix.coverage-target
        name: Determine pytest coverage flags
        run: echo "flags=--cov-report=xml --cov=${{ matrix.coverage-target }}" | tee -a $GITHUB_OUTPUT
      - id: multithreaded
        if: inputs.multithreaded
        name: Determine pytest multithreading flags
        run: echo "flags=--numprocesses=auto" | tee -a $GITHUB_OUTPUT
      - name: Run tests with pytest
        run: >-
          uv run \
            --group test \
            ${{ steps.extra.outputs.extras }} \
            --no-dev \
            ${{ steps.with.outputs.packages }} \
            pytest \
              ${{ steps.coverage.outputs.flags }} \
              ${{ steps.multithreaded.outputs.flags }} \
              -m "not slow or slow"
      - if: matrix.coverage-target
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
      - uses: actions/upload-artifact@v4
        if: inputs.test-output-path
        with:
          name: test-output-${{ matrix.runs-on }}-${{ matrix.python-version }}
          path: ${{ inputs.test-output-path }}
