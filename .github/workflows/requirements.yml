env:
  COMMIT_TITLE: "MAINT: update lock files"

on:
  workflow_call:
    secrets:
      token:
        description: >-
          Personal Access Token for GitHub. This needs to be set as a secret by
          the host repository in order to rerun checks after pushing to a PR.
          The default GITHUB_TOKEN does not suffice for that, see here:
          https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows

          This page tells more about creating a PAT:
          https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
        required: true

jobs:
  create-matrix:
    name: Determine Python versions
    if: >-
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-24.04
    steps:
      - id: set-matrix
        uses: ComPWA/actions/create-python-version-matrix@v1

  pip-constraints:
    name: Update pip constraints
    needs:
      - create-matrix
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.create-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: ComPWA/update-pip-constraints@v1
        with:
          python-version: ${{ matrix.python-version }}

  pre-commit:
    name: pre-commit autoupdate
    if: >-
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ComPWA/update-pre-commit@v1

  pr-exists:
    name: Check if PR already exists
    outputs:
      exists: ${{ steps.pr-exists.outputs.exists }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: List open pull requests
        id: list-prs
        run: |
          delimiter="$(openssl rand -hex 8)"
          echo "prs<<${delimiter}" >> $GITHUB_OUTPUT
          for pr in $(
            gh pr list \
              --json title,url \
              --jq '.[] | select(.title == "${{ env.COMMIT_TITLE }}") | .url' \
              --state open
            ); do
            echo "$pr" | tee -a $GITHUB_OUTPUT
          done
          echo "${delimiter}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Check if constraints PR exists
        id: pr-exists
        run: |
          prs="${{ steps.list-prs.outputs.prs }}"
          if [[ -z "$prs" ]]; then
            echo "exists=false" | tee -a "$GITHUB_OUTPUT"
            echo "✅ No PR with title '${{ env.COMMIT_TITLE }}' found."
          else
            echo "exists=true" | tee -a "$GITHUB_OUTPUT"
            echo "❌ PR with title '${{ env.COMMIT_TITLE }}' already exists."
          fi

  push:
    name: Push changes
    runs-on: ubuntu-24.04
    needs:
      - pip-constraints
      - pr-exists
      - pre-commit
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.token }}
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifact
      - run: ls -A
      - name: Move artifacts to correct location
        run: |
          if [[ -d artifact ]]; then
            cd artifact
            ls -A
            [[ -f .pre-commit-config.yaml ]] && mv -f .pre-commit-config.yaml ..
            [[ "$(ls)" != "" ]] && mkdir -p ../.constraints/ && mv -f * ../.constraints/
            cd ../.constraints/
            [[ ! -f .gitignore ]] && echo '!py3.*.txt' > .gitignore
            cd ../
          fi
      - name: Show changed files
        run: |
          git config --global color.ui always
          git status --short
      - name: Show changes
        run: git diff --color --unified=0
      - name: Commit and push changes
        if: github.event_name == 'pull_request'
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.token }}@github.com/${{ github.repository }}
          git config --global user.name "GitHub"
          git config --global user.email "noreply@github.com"
          git checkout -b ${{ github.head_ref }}
          if [[ $(git status -s) ]]; then
            git add -A
            git commit -m '${{ env.COMMIT_TITLE }}'
            git config pull.rebase true
            git pull origin ${{ github.head_ref }}
            git push origin HEAD:${{ github.head_ref }}
          fi
      - name: Create Pull Request
        if: >-
          (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') &&
          needs.pr-exists.outputs.exists != 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: ${{ env.COMMIT_TITLE }}
          committer: GitHub <noreply@github.com>
          author: GitHub <noreply@github.com>
          title: ${{ env.COMMIT_TITLE }}
          body: >-
            This PR updates the [`pip` constraint files](https://github.com/ComPWA/update-pip-constraints?tab=readme-ov-file#update-pip-constraint-files) under the `.constraints/` directory and pre-commit hooks in [`.pre-commit-config.yaml`](https://pre-commit.com). It was created automatically by a scheduled workflow.
          labels: |
            🔨 Maintenance
          branch-suffix: timestamp
          delete-branch: true
          token: ${{ secrets.token }}
